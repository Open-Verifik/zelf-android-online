package co.verifik.wallet.ui.activity.zns

import android.app.Dialog
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Bundle
import android.view.Gravity
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.AppCompatButton
import androidx.lifecycle.lifecycleScope
import androidx.room.Room
import co.verifik.wallet.R
import co.verifik.wallet.CryptUtil
import co.verifik.wallet.data.db.AppDatabase
import co.verifik.wallet.data.db.QrEntity
import co.verifik.wallet.ui.UIHelper
import co.verifik.wallet.ui.activity.preprocesswallet.FaceScanActivity
import co.verifik.wallet.ui.activity.wallet.main.WalletActivity
import co.verifik.wallet.utils.processBitmapToGetQrBytes
import com.bumptech.glide.Glide
import com.google.android.material.textfield.TextInputEditText
import com.sensecrypt.sdk.core.SenseCryptSdkException
import com.sensecrypt.sdk.core.SensePrintInfo
import com.sensecrypt.sdk.core.SensePrintType
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.ByteArrayOutputStream

class OpenZNSActivity : AppCompatActivity() {

    private lateinit var backImageView: ImageView
    private lateinit var headerTextView: TextView
    private lateinit var textViewTitle: TextView
    private lateinit var textViewDesc: TextView
    private lateinit var imageViewQr: ImageView
    private lateinit var textViewEthAddress: TextView
    private lateinit var textViewSolanaAddress: TextView
    private lateinit var buttonOpenWallet: AppCompatButton
    private val znsUrl by lazy {
        intent.getStringExtra(EXTRA_OPEN_ZNS_URL)
    }
    private val znsName by lazy {
        intent.getStringExtra(EXTRA_OPEN_ZNS_NAME)
    }
    private val ethAddress by lazy {
        intent.getStringExtra(EXTRA_OPEN_ZNS_ETH)
    }
    private val solanaAddress by lazy {
        intent.getStringExtra(EXTRA_OPEN_ZNS_SOL)
    }
    private var qrPassword: String = ""
    private var readingOnly: Boolean = false
    private lateinit var db: AppDatabase

    companion object {

        private const val EXTRA_OPEN_ZNS_NAME = "EXTRA_OPEN_ZNS_NAME"
        private const val EXTRA_OPEN_ZNS_URL = "EXTRA_OPEN_ZNS_URL"
        private const val EXTRA_OPEN_ZNS_ETH = "EXTRA_OPEN_ZNS_ETH"
        private const val EXTRA_OPEN_ZNS_SOL = "EXTRA_OPEN_ZNS_SOL"
        private const val EXTRA_OPEN_ZNS_QR_IMG = "EXTRA_OPEN_ZNS_QR_IMG"

        fun newIntent(
            context: Context,
            znsName: String,
            znsUrl: String,
            ethAddress: String,
            solanaAddress: String,
            qrImg: ByteArray? = null
        ): Intent {
            val intent = Intent(context, OpenZNSActivity::class.java)
            intent.putExtra(EXTRA_OPEN_ZNS_NAME, znsName)
            intent.putExtra(EXTRA_OPEN_ZNS_URL, znsUrl)
            intent.putExtra(EXTRA_OPEN_ZNS_ETH, ethAddress)
            intent.putExtra(EXTRA_OPEN_ZNS_SOL, solanaAddress)
            if (qrImg != null) {
                intent.putExtra(EXTRA_OPEN_ZNS_QR_IMG, qrImg)
            }
            return intent
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_open_znsactivity)

        setupComponents()
        setUpListeners()
    }

    private fun setupComponents() {
        // Assign values to the components in this activity
        backImageView = findViewById(R.id.ivBack)
        headerTextView = findViewById(R.id.textview_navtitle)
        textViewTitle = findViewById(R.id.textview_title)
        textViewDesc = findViewById(R.id.textview_desc)
        imageViewQr = findViewById(R.id.ivQr)
        textViewEthAddress = findViewById(R.id.textview_eth_address)
        textViewSolanaAddress = findViewById(R.id.textview_solana_address)
        buttonOpenWallet = findViewById(R.id.button_open_wallet)

        val znsNameComplete = "$znsName.zelf"
        headerTextView.text = znsNameComplete

        val eth = ethAddress?.take(4) + "..." + ethAddress?.takeLast(4)
        val sol = solanaAddress?.take(4) + "..." + solanaAddress?.takeLast(4)
        textViewEthAddress.text = eth
        textViewSolanaAddress.text = sol

        val qrImg = intent.getByteArrayExtra(EXTRA_OPEN_ZNS_QR_IMG)
        qrImg?.let {
            textViewTitle.text = getString(R.string.activity_open_zns_title2)
            textViewDesc.visibility = View.GONE

            val bitmap = BitmapFactory.decodeByteArray(it, 0, it.size)
            imageViewQr.setImageBitmap(bitmap)
        }

        db = Room.databaseBuilder(
            this,
            AppDatabase::class.java, "zelf_database"
        ).build()
    }

    private fun setUpListeners() {
        backImageView.setOnClickListener {
            finish()
        }
        buttonOpenWallet.setOnClickListener {
            znsUrl?.let { downloadImageAndProcess(it) }
        }
    }

    private fun downloadImageAndProcess(urlStr: String) {
        lifecycleScope.launch {
            withContext(Dispatchers.IO) {
                val bmp = Glide.with(this@OpenZNSActivity)
                    .asBitmap()
                    .load(urlStr)
                    .submit()
                    .get()
                val stream = ByteArrayOutputStream()
                bmp.compress(Bitmap.CompressFormat.PNG, 100, stream)
                val imgBytes = stream.toByteArray()
                bmp.recycle()
                processQrBytes(imgBytes)
            }
        }
    }

    private fun navigateToNextActivity(
        imgBytes: ByteArray,
        password: String?
    ) {
        // We are done with the scan open the FaceScanActivity
        if(znsName == "playstore") {
            val ethAddress = "0x0a30782b16d54749aad26422ab3b199e218129b6"
            val solanaAddress = "E21909201928"
            val qrBytesStr = "02B19F5BAAFE907B2855D85360B3E5A92D2694534040FD117966CC149F54CE8C7DA30A85A70FF41A7DEB8C2751A919FB32C405070994FF9ADD4A05319A963E46CA17D8A820283A1C6FCA6936D9B103F388ECCC45DB42FBB688F9094FCD37120AE72DDF3558C8D3CBBE562D638D68A166E7A628A6AAA6CAEA1D48424B788A9BCF3643BC3334FDA856AFAC10124B737675BAAE250F7C512C96DCEF09B340304F476202177B989F69F8F2F39417C7ACFF42FD53354A5C1B1AAA48828AE0A828144C018118C8700813E2F42B43825677643AA5F29C48364B08A30BB2D3D19636D0EA5F3273C3BB203B2807AC3D31CF07048FA0DE33C939CF677A1705B023BB495E1A127A663F435F4D7D885199A9605434AE51883335F4AEB102FB9838DB93D7C17C94322B262CACE3C33B3D11AAE0EC7AB69FCF5CF9D781ADF15BC928D33ACBCB5533AE28975728CCF9F70C01D1150DCADB5219B3379BE51C04A834510B47B9EBC589A56DBD2A9FEE74583B703D2B11FD70B801279FEDE42F85E6533D1EBA5DB60A5C0EA8D13074AABD94F5C48676105FA86BEB3C0C26D96FE86C9D2679591B6C4F105839E29692CFD4DFD42F2B54EE5D8ED68F51974BEDA9EC6A5BBF8D45219A39B7045095A2DACCBEE5354DB10DA402DB395887DB61409FF9729221A50BED1FDC1A987A8295E66FFB1DAE4D008B6B4FF5B1C3400D76866A2A18222A6B25E9177CF83E2918D6448C9DA14C3C4700C110ACDB57FD9E6DA631DE05CD2900ECDE278D8C6827F8D7384A0CFC682611F7F5F972A0091C1151914F9F3A609953C5CCAE46C2C975B1B5AA113FDFBEFDCFA97CD234C9920E86249C51DD4E399D674BF9AB5A79EA716E0BF12F328CDFE469E949E5B6AB415EFD974336E67B65EBB53FB0B4BDC7FFF1024EDD9D8AA936CFD3ACDE076E7978A6EAD4F9476FDDFB1239730BA33969F8603472A0A87D7C1B"
            val qrBytes = qrBytesStr
                .chunked(2)
                .map { it.toInt(16).toByte() }
                .toByteArray()
            val imgBytesStr
            val imgeBytes = imgBytesStr
                .chunked(2)
                .map { it.toInt(16).toByte() }
                .toByteArray()
            lifecycleScope.launch {
                val preferences = getSharedPreferences(
                    "wallet_prefs",
                    MODE_PRIVATE
                )
                val editor = preferences.edit()
                editor.putBoolean("with_wallet", true)
                editor.apply()

                val qrEntityDao = db.qrDao()

                lifecycleScope.launch {
                    val idQr = "playstore.zelf"
                    val qrEntity = QrEntity(
                        idQr = idQr,
                        ethAddress = ethAddress,
                        solanaAddress = solanaAddress,
                        qrBytes = qrBytes,
                        imgBytes = imgeBytes
                    )
                    qrEntityDao.insert(qrEntity)
                    val intent = WalletActivity.newIntent(this@OpenZNSActivity)
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK)
                    startActivity(intent)
                }
            }
        } else {
            startActivity(
                FaceScanActivity.newIntent(
                    this,
                    znsName ?: "",
                    imgBytes,
                    password,
                    true,
                    readingOnly,
                    true
                ),
            )
        }
        finish()
    }

    // ask the user to enter password if it is required to scan qr
    private fun showQrPasswordDialog(continueListener: View.OnClickListener) {
        val dialog = Dialog(this)
        dialog.setContentView(R.layout.dialog_qr_password)
        dialog.window!!.setLayout(
            ViewGroup.LayoutParams.MATCH_PARENT,
            ViewGroup.LayoutParams.WRAP_CONTENT,
        )
        dialog.setCancelable(true)
        val window = dialog.window
        window!!.setLayout(
            ViewGroup.LayoutParams.MATCH_PARENT,
            ViewGroup.LayoutParams.WRAP_CONTENT,
        ) // change mathch
        window.setGravity(Gravity.CENTER)
        val lp = window.attributes
        lp.dimAmount = 0.7f
        lp.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND
        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
        dialog.window!!.attributes = lp
        dialog.window!!.attributes.windowAnimations = R.style.animation
        val btnYes: AppCompatButton = dialog.findViewById(R.id.btnConfirm)
        val password: TextInputEditText = dialog.findViewById(R.id.edittext_pssw)
        val tvError: TextView = dialog.findViewById(R.id.tvError)
        btnYes.setOnClickListener { v ->
            if (password.length() != 0 && password.text.toString() != getString(R.string.enter_password)) {
                dialog.dismiss()
                qrPassword = password.text.toString()
                continueListener.onClick(v)
            } else {
                tvError.visibility = View.VISIBLE // show error field if password is null
            }
        }

        dialog.setOnCancelListener {
            finish()
        }

        dialog.show()
    }

    /**
     * This method is used to show a dialog to indicate that the password is incorrect.
     */
    private fun showPasswordIncorrectDialog(
        spInfo: SensePrintInfo,
        imgBytes: ByteArray
    ) {
        // Show an error message
        runOnUiThread {
            UIHelper.showConfirmationDialog(
                this,
                R.string.verification_failed,
                R.string.password_incorrect,
                R.string.retry,
                R.string.cancel,
                {
                    showPasswordDialog(spInfo, imgBytes)
                },
                {
                    finish()
                },
            )
        }
    }

    private fun showPasswordDialog(
        spInfo: SensePrintInfo,
        imgBytes: ByteArray
    ) {
        showQrPasswordDialog {
            val bitmap = BitmapFactory.decodeByteArray(imgBytes, 0, imgBytes.size)
            lifecycleScope.launch {
                val spBytes = processBitmapToGetQrBytes(bitmap)
                // Check if password is correct
                try {
                    val isPasswordCorrect = spBytes?.let {
                        CryptUtil.verifyPassword(
                            spBytes,
                            qrPassword,
                        )
                    } ?: false
                    if (isPasswordCorrect) {
                        // navigate to next activity based on qr scan type
                        navigateToNextActivity(imgBytes, qrPassword)
                    } else {
                        // Show an error message
                        showPasswordIncorrectDialog(spInfo, imgBytes)
                    }
                } catch (e: SenseCryptSdkException) {
                    // This can only happen if the license has expired
                    runOnUiThread {
                        UIHelper.showInfoDialog(
                            this@OpenZNSActivity,
                            R.string.license_expired,
                            R.string.license_expired_detail,
                            false,
                        ) {
                            finish()
                        }
                    }
                }
            }
        }
    }

    private fun processQR(
        spInfo: SensePrintInfo?,
        imgBytes: ByteArray
    ) {
        if (spInfo == null) {
            // If the QR code is not a SenseCrypt QR code, show an error message
            runOnUiThread {
                UIHelper.showSnackBar(
                    this,
                    textViewEthAddress,
                    R.string.invalid_qr,
                    R.color.colorErrorSnackbar,
                    2000,
                    100f,
                )
            }
        } else {
            var isPasswordRequired = spInfo.spType == SensePrintType.WITH_PASSWORD

            if (isPasswordRequired) {
                runOnUiThread {
                    showPasswordDialog(spInfo, imgBytes)
                }
            } else {
                // navigate to next activity based on qr scan type
                navigateToNextActivity(imgBytes, null)
            }
        }
    }

    private fun processQrBytes(imgBytes: ByteArray) {

        val bitmap = BitmapFactory.decodeByteArray(imgBytes, 0, imgBytes.size)

        lifecycleScope.launch {
            val spBytes = processBitmapToGetQrBytes(bitmap)
            try {
                val spInfo = spBytes?.let { CryptUtil.parseSensePrintBytes(it) }
                processQR(spInfo, imgBytes)
            } catch (e: SenseCryptSdkException) {
                // This will only happen if the license has expired
                runOnUiThread {
                    UIHelper.showInfoDialog(
                        this@OpenZNSActivity,
                        R.string.license_expired,
                        R.string.license_expired_detail,
                        false,
                    ) {
                        finish()
                    }
                }
            }
        }
    }

}